---
# tasks file for elk
- name: "git clone project MeetU"
  become: no
  git:
    repo: "https://github.com/wdrdres3qew5ts21/MeetU.git"
    dest: "~/meetu"
    update: yes

- name: Create Docker Network for ELK Stack
  docker_network:
    name: meetu_elastic

- name: Create Elastic Certificate Volume for Docker
  docker_volume:
    name: meetu_cert
    state: present

# # Generate Self Sign Certificate ถ้าตรงกับเงื่อนไข
# - name: "[SSL] Generate self certificate"
#   when: ssl_enabled == "true"
#   become: no
#   docker_compose:
#     project_src: "~/meetu"
#     files:
#       - create-cert-pem.yml
#     state: present
    

# ต้องใช้ Certificate จาก Let's Encrypt มาเชื่อมกับ container ของเราผ่าน volume
- name: "Start Elasticsearch Docker"
  vars:
    # ตำแหน่งของ cert_dir ที่อยู่ใน "container" แล้ว ว่าไฟล์อยู่ในที่ไหนของ "container"
    - cert_dir: "/usr/share/elasticsearch/config/certificates"
  docker_container:
    name: elasticsearch1
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    state: started
    restart: yes
    purge_networks: yes
    published_ports:
      - "9200:9200"
    networks_cli_compatible: yes
    networks:
      - name: meetu_elastic
    volumes:
      - meetu_data01:/usr/share/elasticsearch/data
      - "/home/{{ansible_user}}/ssl-certificate:{{cert_dir}}"
    ulimits:
      - "memlock:-1:-1"
    # env ทุกตัวของ ansible ต้องใส่ quotes ไว้ด้วยสำคัญมากๆเพราะมไ่งั้นจะ compile ไม่ผ่านเฉพาะส่วน env
    env:
      node.name: "elasticsearch1"
      # จะทำให้มันไม่ยอมเข้าไปอยู่ใน cluster และเอาตัวเองเป้น master เสมอเลย
      # - discovery.type: single-node
      # เวลา scan Elasticsearch จะเช็ค Auto internal Transport Layer บน Port 9300-9305 ทันทีและรวบเข้า Cluster
      # ระหว่างทางสามารถเพิ่มลดได้ตามใจชอบระบบจะ Detect เองอัตโนมัติ
      # sudo sysctl -w vm.max_map_count: 262144 ถ้าทำ cluster ต้องขยาย memmory ด้วยไม่งั้นจะ fail
      discovery.type: "single-node"
      "bootstrap.memory_lock": "true"
      "ES_JAVA_OPTS": "-Xms256m -Xmx256m"
      http.cors.enabled: "true"
      http.cors.allow-origin: "*"
      # ผูกเข้ากับ interface คอมเราผ่าน ifconfig
      network.host: "0.0.0.0"
      # หลังติดตั้งเสร็จแล้วต้องรันคำสั่ง bin/elasticsearch-setup-passwords interactive
      # เพื่อให้ xpack module ที่ลงไว้ทำการตั้ง password ตามที่เราตั้งด้วยนั่นเอง
      # ถ้าใช้ xpack บน cluster mode จะโดน bootstrap สั่งให้ทำ TLS ด้วยทันทีไม่งั้นจะ bootstrap ไม่ผ่าน
      "ELASTIC_PASSWORD": "{{elastic_password}}"
      xpack.security.enabled: "{{ ssl_enabled  | default('false') }}"
      xpack.security.http.ssl.enabled: "true"
      xpack.security.http.ssl.key: "{{cert_dir}}/privkey.pem"
      xpack.security.http.ssl.certificate: "{{cert_dir}}/cert.pem"
      xpack.security.http.ssl.certificate_authorities: "{{cert_dir}}/fullchain.pem"
      xpack.security.transport.ssl.enabled: "{{ ssl_enabled | default('false') }}"
      xpack.security.transport.ssl.verification_mode: "certificate"
      xpack.security.transport.ssl.key: "{{cert_dir}}/privkey.pem"
      xpack.security.transport.ssl.certificate: "{{cert_dir}}/cert.pem"
      xpack.security.transport.ssl.certificate_authorities: "{{cert_dir}}/fullchain.pem"

- name: Create Kibana Config Directory
  become: no
  file:
    path: ~/kibana
    state: directory

- name: Config Kibana Template.yml
  become: no
  template:
    src: kibana.yml
    dest: ~/kibana/kibana.yml
    force: yes

- name: "Start Kibana Docker"
  become: no
  vars:
    # ตำแหน่งของ cert_dir ที่อยู่ใน "container" แล้ว ว่าไฟล์อยู่ในที่ไหนของ "container"
    - cert_dir: "/usr/share/elasticsearch/config/certificates"
  docker_container:
    image: docker.elastic.co/kibana/kibana:7.7.0
    name: kibana
    restart: yes
    state: started
    networks_cli_compatible: yes
    networks:
      - name: meetu_elastic
    published_ports:
      - "5601:5601"
    env:
      SERVER_HOST: "0.0.0.0"
      ELASTICSEARCH_HOSTS: "https://elasticsearch1:9200"
      ELASTICSEARCH_USERNAME: "kibana"
      ELASTICSEARCH_PASSWORD: "{{elastic_password}}"
      SERVER_SSL_ENABLED: "{{ ssl_enabled | default('false') }}"
      SERVER_SSL_KEY: "{{cert_dir}}/privkey.pem"
      SERVER_SSL_CERTIFICATE: "{{cert_dir}}/cert.pem"
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: "{{cert_dir}}/fullchain.pem"
      ELASTICSEARCH_SSL_VERIFICATIONMODE: "certificate"
    volumes:
      - "/home/{{ansible_user}}/ssl-certificate:{{cert_dir}}"
      - "~/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml"
    when: ssl_enabled == "true" 

- name: "Start Kibana Docker"
  become: no
  vars:
    # ตำแหน่งของ cert_dir ที่อยู่ใน "container" แล้ว ว่าไฟล์อยู่ในที่ไหนของ "container"
    - cert_dir: "/usr/share/elasticsearch/config/certificates"
  docker_container:
    image: docker.elastic.co/kibana/kibana:7.7.0
    name: kibana
    restart: yes
    state: started
    networks_cli_compatible: yes
    networks:
      - name: meetu_elastic
    published_ports:
      - "5601:5601"
    env:
      SERVER_HOST: "0.0.0.0"
      ELASTICSEARCH_HOSTS: "http://elasticsearch1:9200"
      ELASTICSEARCH_USERNAME: "kibana"
      ELASTICSEARCH_PASSWORD: "{{elastic_password}}"
      SERVER_SSL_ENABLED: "{{ ssl_enabled | default('false') }}"
      SERVER_SSL_KEY: "{{cert_dir}}/privkey.pem"
      SERVER_SSL_CERTIFICATE: "{{cert_dir}}/cert.pem"
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: "{{cert_dir}}/fullchain.pem"
      ELASTICSEARCH_SSL_VERIFICATIONMODE: "certificate"
    volumes:
      - "/home/{{ansible_user}}/ssl-certificate:{{cert_dir}}"
      - "~/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml"
    when: ssl_enabled == "false" 

- name: "[HTTPS] Change Kibana Password API"
  uri:
    url: "https://localhost:9200/_security/user/kibana/_password?pretty"
    follow_redirects: none
    method: POST
    user: elastic
    password: "{{elastic_password}}"
    validate_certs: no
    force_basic_auth: yes
    body_format: json
    body: >
      { "password": "{{elastic_password}}" }
  register: _result
  until: _result.status == 200
  retries: 20 
  delay: 5
  when: ssl_enabled == "true" 

- name: "[HTTP] Change Kibana Password API"
  uri:
    url: "http://localhost:9200/_security/user/kibana/_password?pretty"
    follow_redirects: none
    method: POST
    user: elastic
    password: "{{elastic_password}}"
    validate_certs: no
    force_basic_auth: yes
    body_format: json
    body: >
      { "password": "{{elastic_password}}" }
  register: _result
  until: _result.status == 200
  retries: 20 
  delay: 5
  when: ssl_enabled == "false" 

